#PATH stuff
PATH=/opt/homebrew/bin:/Users/m.kepa/bin:$PATH
PATH="/opt/homebrew/opt/openjdk@21/bin:$PATH"
#add vscode search to local path
PATH="$PATH:/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/"

#fix umlaut problem
export LC_CTYPE='UTF-8'

#mystuff
alias removeme='mkdir -p /tmp/_removeme; cd /tmp/_removeme'
alias v='viddy -b -d ls -l'
alias pip='pip3'
alias python='python3'
alias flushdns='sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder'
#alias ipa='curl -s ipinfo.io |tr -d "{}\""'
alias ipa='curl -s https://checkip.amazonaws.com/ '
alias weatherv1='curl -s http://wttr.in/~vienna'
alias weather='curl -s http://v2.wttr.in/~vienna'
alias work='cd /Users/m.kepa/Library/CloudStorage/xxx/work'
alias download='curl -kSLOC - '
alias cresp='curl -sILw "HTTP response >> %{http_code}" -o /dev/null '
alias p='ping'
alias p1='ping 1.1.1.1'
alias p8='ping 8.8.8.8'
alias ll='ls -la'
alias ls='ls -F --color=auto'
alias l='ls -lah'
alias grep='grep --color=auto'
alias cdmktemp='cd $(mktemp -d)'
alias supersync='rsync -aHAXxv --numeric-ids --progress -e "ssh -T -c aes128-gcm@openssh.com -o Compression=no -x"'

#docker aliases
alias d='docker'
alias di='docker images'
alias dp='docker pull'

#terraform
alias t='terraform '
alias ti='/usr/local/bin/terraform init'
alias t-debug='export TF_LOG="TRACE"; export TF_LOG_PATH="/tmp/_removeme/terraform.log"; tail -F /tmp/_removeme/terraform.log'

#kubectl aliases
alias cleanpods="kubectl get pods --all-namespaces -o wide| grep -i \"Error\|NodeShutdown\|Terminated\|Completed\" | awk '{print $1, $2}'| xargs -n2 kubectl delete pod -n"
alias k='kubectl '
alias kf='kubectl logs -f'
alias kp='kubectl get pods'
alias ks='kubectl get services'
alias krc='kubectl get rc'
alias kinfo='kubectl config view --minify | yq'
alias m='/usr/local/bin/minikube '
alias kx='kubectx '
alias kns='kubens '

#git aliases
export GIT_PATH="/Users/m.kepa/gitlocal"
alias gco='git checkout'
alias gf='git fetch --all --prune --prune-tags'
alias gb='git branch -a'
alias gs='git status -sb --show-stash'
alias gl="git log --graph --decorate --pretty=oneline --abbrev-commit --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'"
alias gitlocalrepos='cd ${GIT_PATH}'
alias gitupdatelocal=' for i in $(ls -1 ${GIT_PATH}); do cd ${GIT_PATH}/$i ;echo ">>> updating $i";git fetch --prune; git pull ;done; gitlocalrepos'
alias gitclean='git fetch --all --prune --prune-tags; git branch --merged| grep -Ev "(^\*|master|main|dev)" | xargs git branch --delete'
alias gl="git log --graph --decorate --pretty=oneline --abbrev-commit --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'"
alias glfulldate="git log --graph --decorate --all --topo-order --date=format-local:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset %C(black bold)%ad%Creset%C(auto)%d %s'"
alias gp='git pull --rebase --autostash --verbose --all --prune'
alias gp-submodule='git submodule update --init --recursive'
alias gp-full='gp; gp-submodule'

gitpowerclean() {
    git fetch --all --prune --prune-tags
    toremove_branches=($(git branch -vv | awk '/: gone]/ {print $1}' | grep -Ev "(^\*|master|main|dev)"))
    if [ ${#toremove_branches[@]} -eq 0 ]; then
        echo ">> No branches to delete."
        return
    fi
    echo ">> Would delete:"
    printf '%s\n' "${toremove_branches[@]}"
    echo ">> Are you sure you want to delete these branches? (y/n): "
    read "confirm"
    if [[ $confirm =~ ^[yY]$ ]]; then
        # Try to delete branches normally first
        for branch in "${toremove_branches[@]}"; do
            if [ -z "$branch" ]; then
                continue
            fi
            if ! git branch -d "$branch" 2>/dev/null; then
                echo ">> Branch '$branch' is not fully merged."
                echo ">> Do you want to forcibly delete this branch? (y/n): "
                read "force_confirm"
                if [[ $force_confirm =~ ^[yY]$ ]]; then
                    git branch -D "$branch"
                fi
            fi
        done
    fi
}

# generate your ssh
# ssh-keygen -t ed25519 -f ~/.ssh/mkepa-xxx -a 100 -C "nameEmailDomain"
# load ssh keys
if [ -z "$SSH_AGENT_PID" ]; then
    eval $(ssh-agent -s)
    ssh-add ~/.ssh/mkepa-xxx
    ssh-add -L
else
    echo ">> Loaded ssh keys <<< "
    ssh-add -L
fi

# completions
source <(minikube completion zsh)
source <(docker completion zsh)
source <(helm completion zsh)
source <(kubectl completion zsh)

source <(awsprofile completion zsh)
compdef _awsprofile awsprofile
